#!/usr/bin/env bash

function usage {
    echo >&2 "usage: $0"
    echo >&2 "          [-h|--help] print this message"
    echo >&2 "          [-i|--show-install] show how to install "
    echo >&2 "          [-p|--show-package] display packages to install"
    echo >&2 "          [-e|--environment] display environment variables"
    exit 0
}

function error {
    env
    echo "source $ROS_INSTALLDIR/setup.bash"
    exit 1
}
trap error ERR

# command line parse
OPT=`getopt -o hipe -l help,show-install,show-package,show-environment -- $*`
if [ $? != 0 ]; then
    usage
fi

eval set -- $OPT
while [ -n "$1" ] ; do
    case $1 in
	-h|--help) usage ;;
	-i|--show-install) SHOW="install"; shift;;
	-p|--show-package) SHOW="package"; shift;;
	-e|--show-environment) SHOW="environment"; shift;;
	--) shift; break;;
	*) echo "Unknown option($1)"; usage;;
    esac
done

# set environment variables
# set distribution
case $1 in
    cturtle|diamondback|electric|fuerte|groovy|hydro) export DISTRIBUTION=$1; shift;;
    *)      export DISTRIBUTION=fuerte;;
esac

# check ros distribution and ubuntu distribution
# http://ros.org/reps/rep-0003.html
export LSB_RELEASE=`lsb_release -cs`
if ( [ "$DISTRIBUTION" == "cturtle" ] && \
    [[ $LSB_RELEASE =~ (lucid|maverick) ]] ) || \
   ( [ "$DISTRIBUTION" == "diamondback" ] && \
    [[ $LSB_RELEASE =~ (lucid|maverick|natty) ]] ) || \
   ( [ "$DISTRIBUTION" == "diamondback" ] && \
    [[ $LSB_RELEASE =~ (lucid|maverick|natty) ]] ) || \
   ( [ "$DISTRIBUTION" == "electric" ] && \
    [[ $LSB_RELEASE =~ (lucid|maverick|natty|oneiric) ]] ) || \
   ( [ "$DISTRIBUTION" == "fuerte" ] && \
    [[ $LSB_RELEASE =~ (lucid|oneiric|precise) ]] ) || \
   ( [ "$DISTRIBUTION" == "groovy" ] && \
    [[ $LSB_RELEASE =~ (oneiric|precise|quantal) ]] ) || \
   ( [ "$DISTRIBUTION" == "hydro" ] && \
    [[ $LSB_RELEASE =~ (precise|quantal|raring) ]] ) then
    echo "Install $DISTRIBUTION to $LSB_RELEASE"
else
    echo "target distribution($DISTRIBUTION) does not support $LSB_RELEASE platform, exit install program"
    exit -1
fi



# setup workspaceand buildspace
if [ "$WORKSPACE" == "" ]; then # if not jenkins
    export WORKSPACE=$HOME
fi
export ROS_INSTALLDIR=$WORKSPACE/ros/$DISTRIBUTION
export PATH=$PATH:/usr/sbin:/usr/bin:/sbin:/bin

# set environment variables
if [ -f /proc/xen -o "`grep -c 'QEMU Virtual CPU' /proc/cpuinfo`" != "0" ]; then
    export ROS_PARALLEL_JOBS=-j1
else
    export ROS_PARALLEL_JOBS=-j4
fi
export ROS_HOME=$WORKSPACE/.ros
export PATH=$PATH:/usr/local/bin ## for ros tools
export LC_ALL=en_US.UTF-8
unset SVN_REVISION ## this jenkins environment valiables conflicts with mk/svn_checkout.mk

# define functions
# http://www.ros.org/wiki/electric/Installation/Ubuntu
function setup-ros {
    sudo dpkg --configure -a
    sudo apt-get -y --force-yes install build-essential python-yaml cmake subversion wget python-setuptools git-core mercurial aptitude
    sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu `lsb_release -cs` main" > /etc/apt/sources.list.d/ros-latest.list'
    wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
    sudo apt-get update
    sudo apt-get upgrade -y --force-yes
    sudo apt-get -y --force-yes install python-rosdep python-rosinstall || sudo apt-get -y --force-yes install python-rosdep
    if [ -e /etc/ros/rosdep/sources.list.d/20-default.list ] ; then
        sudo rm -f /etc/ros/rosdep/sources.list.d/20-default.list;  # rosdep init fails when arleady initialized
    fi
    while [ ! -e /etc/ros/rosdep/sources.list.d/20-default.list ]; do
        sudo rosdep init
    done
    (rosdep update; true)
}

# see http://ros.org/reps/rep-0113.html for variants and http://www.ros.org/debbuild/ for build status
INSTALL_ROS_PACKAGE="ros-$DISTRIBUTION-common-tutorials ros-$DISTRIBUTION-actionlib ros-$DISTRIBUTION-pr2-object-manipulation ros-$DISTRIBUTION-rosdoc-lite ros-$DISTRIBUTION-robot-model ros-$DISTRIBUTION-mjpeg-server ros-$DISTRIBUTION-pr2-robot ros-$DISTRIBUTION-remote-lab ros-$DISTRIBUTION-turtlebot ros-$DISTRIBUTION-audio-common ros-$DISTRIBUTION-openni-kinect ros-$DISTRIBUTION-remote-lab ros-$DISTRIBUTION-geometry-visualization ros-$DISTRIBUTION-pr2-ethercat-drivers ros-$DISTRIBUTION-pr2-power-drivers ros-$DISTRIBUTION-pr2-simulator ros-$DISTRIBUTION-pr2-gui ros-$DISTRIBUTION-remote-lab ros-$DISTRIBUTION-geometry-experimental ros-$DISTRIBUTION-sql-database ros-$DISTRIBUTION-tabletop-object-perception ros-$DISTRIBUTION-ros-realtime ros-$DISTRIBUTION-pr2-tabletop-manipulation-apps ros-$DISTRIBUTION-pr2-object-manipulation ros-$DISTRIBUTION-pr2-arm-navigation ros-$DISTRIBUTION-pr2-kinematics ros-$DISTRIBUTION-pr2-navigation ros-$DISTRIBUTION-pr2-calibration ros-$DISTRIBUTION-web-interface ros-$DISTRIBUTION-pr2-mechanism ros-$DISTRIBUTION-pr2-controllers ros-$DISTRIBUTION-pr2-common ros-$DISTRIBUTION-point-cloud-perception ros-$DISTRIBUTION-robot-calibration ros-$DISTRIBUTION-object-manipulation ros-$DISTRIBUTION-control ros-$DISTRIBUTION-remote-lab ros-$DISTRIBUTION-pr2-common ros-$DISTRIBUTION-pr2-mechanism ros-$DISTRIBUTION-control ros-$DISTRIBUTION-pr2-controllers ros-$DISTRIBUTION-perception-pcl ros-$DISTRIBUTION-physics-ode ros-$DISTRIBUTION-octomap-mapping ros-$DISTRIBUTION-arm-navigation ros-$DISTRIBUTION-perception ros-$DISTRIBUTION-mobile ros-$DISTRIBUTION-remote-lab ros-$DISTRIBUTION-remote-lab ros-$DISTRIBUTION-physics-ode ros-$DISTRIBUTION-stage ros-$DISTRIBUTION-simulator-gazebo ros-$DISTRIBUTION-simulator-stage ros-$DISTRIBUTION-remote-lab ros-$DISTRIBUTION-vision-opencv ros-$DISTRIBUTION-image-pipeline ros-$DISTRIBUTION-image-transport-plugins ros-$DISTRIBUTION-image-common ros-$DISTRIBUTION-remote-lab ros-$DISTRIBUTION-perception-pcl ros-$DISTRIBUTION-laser-pipeline ros-$DISTRIBUTION-slam-gmapping ros-$DISTRIBUTION-navigation ros-$DISTRIBUTION-robot ros-$DISTRIBUTION-remote-lab ros-$DISTRIBUTION-visualization-tutorials ros-$DISTRIBUTION-geometry-tutorials ros-$DISTRIBUTION-common-tutorials ros-$DISTRIBUTION-ros-tutorials ros-$DISTRIBUTION-remote-lab ros-$DISTRIBUTION-geometry-experimental ros-$DISTRIBUTION-robot-model-visualization ros-$DISTRIBUTION-geometry-visualization ros-$DISTRIBUTION-diagnostics-monitors ros-$DISTRIBUTION-executive-smach-visualization ros-$DISTRIBUTION-laser-pipeline ros-$DISTRIBUTION-image-common ros-$DISTRIBUTION-rx ros-$DISTRIBUTION-visualization ros-$DISTRIBUTION-visualization-common ros-$DISTRIBUTION-remote-lab ros-$DISTRIBUTION-xacro ros-$DISTRIBUTION-executive-smach ros-$DISTRIBUTION-robot-model ros-$DISTRIBUTION-assimp ros-$DISTRIBUTION-pluginlib ros-$DISTRIBUTION-orocos-kinematics-dynamics ros-$DISTRIBUTION-nodelet-core ros-$DISTRIBUTION-geometry ros-$DISTRIBUTION-bullet ros-$DISTRIBUTION-filters ros-$DISTRIBUTION-eigen ros-$DISTRIBUTION-driver-common ros-$DISTRIBUTION-diagnostics ros-$DISTRIBUTION-common ros-$DISTRIBUTION-common-msgs ros-$DISTRIBUTION-bond-core ros-$DISTRIBUTION-ros-base ros-$DISTRIBUTION-ros-full ros-$DISTRIBUTION-pr2-apps ros-$DISTRIBUTION-wg-pr2-apps ros-$DISTRIBUTION-pr2-navigation-apps  ros-$DISTRIBUTION-catkin ros-$DISTRIBUTION-camera-umd"
function apt-get-ros-package {
    echo "hddtemp hddtemp/daemon boolean false" | sudo debconf-set-selections
    INSTALL_ROS_PACKAGE=`echo $INSTALL_ROS_PACKAGE | tac -s' '`
    for PACKAGE in $INSTALL_ROS_PACKAGE
    do
	echo "install $PACKAGE"
	sudo apt-get -y --force-yes install $PACKAGE
    done
    return 0
}

# jsk ros install (copy from http://code.google.com/p/rtm-ros-robotics/wiki/ROS_English)
function install-pkg {
    (mkdir -p $ROS_INSTALLDIR && cd $ROS_INSTALLDIR && ( [ -f .rosinstall ] || rosws init ) && for ROSINSTALL in $@; do echo $ROSINSALL;sed -i s/@ROS_DISTRO@/$DISTRIBUTION/ $ROSINSTALL; sed -i s/^#@#// $ROSINSTALL; ROS_WORKSPACE="" rosws merge $ROSINSTALL -r -y ; done && ROS_WORKSPACE="" rosws update)
# source
}

function rosdep_and_rosmake {
    trap error ERR
    local package=$1
    rosdep install -y $package
    rosmake --profile --status-rate=0 $package
}

function compile-pkg {
    trap error ERR
    local PACKAGES=$@
    . $ROS_INSTALLDIR/setup.sh
    # sometimes sourceforge returns error
    rospack profile
    (cd `rospack find euslisp`; svn up; svn up)

    # start rosdep_and_rosmake
    for PACKAGE in $PACKAGES
    do
	rosdep_and_rosmake $PACKAGE
    done
}

function test-pkg {
    trap error ERR
    local PACKAGES=$@
    . $ROS_INSTALLDIR/setup.sh
    # test
    export DISPLAY=
    export PATH=$PATH:`rospack find roseus`/bin
    rm -fr $ROS_INSTALLDIR/../../.ros/test_results

    for PACKAGE in $PACKAGES
    do
        # catkin uses make tests, rosbuild uses make test
        if ( [ $DISTRIBUTION == "electric" ] || [ $DISTRIBUTION == "fuerte" ] || [ ! -e `rospack find $PACKAGE`/package.xml ] ); then
            (cd `rospack find $PACKAGE`; make test  || echo "-- $PACKAGE failed" )
        else
            (cd `rospack find $PACKAGE`; make tests || echo "-- $PACKAGE failed" )
        fi
    done
}

function doc-pkg {
    trap error ERR
    local PACKAGES=$@
    . $ROS_INSTALLDIR/setup.sh
    # test
    export DISPLAY=:0.0
    export PATH=$PATH:`rospack find roseus`/bin
    rm -fr $ROS_INSTALLDIR/../../.ros/test_results

    for PACKAGE in $PACKAGES
    do
	(cd `rospack find $PACKAGE`; make test || make tests) # catkin uses make tests, rosbuild uses make test
        # chnage to JENKINS_URL and commit for jenkins
	if [ "$JENKINS_URL" != "" -a "$SVN_USERNAME" != "" -a "$SVN_PASSWORD" != "" -a -f `rospack find $PACKAGE`/build/index.rst ] ; then
	    sed -i "s@^.. image:: build/@.. image:: $JENKINS_URL/job/$JOB_NAME/lastSuccessfulBuild/artifact/doc/$PACKAGE/html/_images/@" `rospack find $PACKAGE`/build/index.rst
	    sed -i "s@^.. video:: build/@.. video:: $JENKINS_URL/job/$JOB_NAME/lastSuccessfulBuild/artifact/doc/$PACKAGE/html/_images/@" `rospack find $PACKAGE`/build/index.rst
	    (cd `rospack find $PACKAGE`; cp build/index.rst ./; cp build/conf.py ./; svn add --non-interactive --username $SVN_USERNAME --password $SVN_PASSWORD index.rst conf.py; svn commit --non-interactive --username $SVN_USERNAME --password $SVN_PASSWORD -m "update index.rst,conf.py by Jenkins" index.rst conf.py)
	fi
    done

    # if there are xdisplay, generate doc and index doc
    if [ "`xdpyinfo > /dev/null || echo "fail"`" == "fail" ] ; then
	echo "Could not connect to Xserver, so exit without running launchdoc"
	return 0
    fi

    # doc
    mkdir -p $ROS_INSTALLDIR/doc
    SVN_REVISION=`LANGUAGE=en LANG=C svn info $ROS_INSTALLDIR/jsk-ros-pkg | grep Revision`
    cat<<EOF > $ROS_INSTALLDIR/doc/index.rst
========================================
jsk-ros-pkg($SVN_REVISION) Test Results
========================================
EOF
    for PACKAGE in $PACKAGES
    do
	if [ -f `rospack find $PACKAGE`/index.rst ]; then
	    (cd $ROS_INSTALLDIR; rm -fr doc; rosdoc_lite `rospack find $PACKAGE`)
	    (wkhtmltopdf $ROS_INSTALLDIR/doc/html/index.html $ROS_INSTALLDIR/doc/$PACKAGE.pdf; true)
	    convert $ROS_INSTALLDIR/doc/$PACKAGE.pdf $ROS_INSTALLDIR/doc/$PACKAGE.png
	    if [ -f $ROS_INSTALLDIR/doc/$PACKAGE.png ]; then
		PACKAGEPNG=$PACKAGE.png
	    else
		PACKAGEPNG=$PACKAGE-0.png
	    fi
	    cat <<EOF >> $ROS_INSTALLDIR/doc/index.rst

.. image:: $PACKAGEPNG
   :width: 320
   :target: $PACKAGE/html/index.html

EOF
	fi
    done
    for PACKAGE in $PACKAGES
    do
	if [ -f `rospack find $PACKAGE`/index.rst ]; then
	    cat <<EOF >> $ROS_INSTALLDIR/doc/index.rst
$PACKAGE

  ros wiki page http://ros.org/wiki/$PACKAGE/

  ros api page http://ros.org/doc/api/$PACKAGE/html/

EOF
	fi
    done

    rst2html $ROS_INSTALLDIR/doc/index.rst $ROS_INSTALLDIR/doc/index.html
}

function install-jsk-ros-pkg {
    wget  'http://svn.code.sf.net/p/jsk-ros-pkg/code/trunk/jsk.rosinstall?format=raw' -O /tmp/jsk.rosinstall.$$
    install-pkg /tmp/jsk.rosinstall.$$
    rosdep install euslisp
    if [ "$DISPLAY" != "" ] && [ "`xset -q fp | grep /usr/share/fonts/X11/100dpi`" == "" ]; then
        xset +fp /usr/share/fonts/X11/100dpi,/usr/share/fonts/X11/75dpi
    fi
}
function compile-jsk-ros-pkg {
    compile-pkg pr2eus_openrave elevator_move_base_pr2 detect_cans_in_fridge_201202 jsk_2013_04_pr2_610
}
function test-jsk-ros-pkg {
    test-pkg euslisp roseus pr2eus euscollada pr2eus_openrave jsk_pcl_ros kinect_near_mode_calibration elevator_move_base_pr2 detect_cans_in_fridge_201202 jsk_2013_04_pr2_610
}

# show-* option
case "$SHOW" in
    install) declare -f setup-ros | awk '/^\ /{print $0}' | sed -e 's/^[ ]*//'; exit 0;;
    package) echo "sudo apt-get -y --force-yes install $INSTALL_ROS_PACKAGE" ; exit 0;;
    environment) env; return 0;;
esac

# main program
set -x

if [ $# -gt 0 ]; then ## if we have arguments, check functions
    $@
else
    setup-ros
    apt-get-ros-package
    install-jsk-ros-pkg
    compile-jsk-ros-pkg
    test-jsk-ros-pkg
fi

#
(which rosrun && rosrun rosunit clean_junit_xml.py; echo "done")     # check error

